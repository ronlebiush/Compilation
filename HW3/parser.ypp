%{
    #include <iostream>
    #include <stdlib.h>
    using namespace std;
    #include "source.hpp"
    #include "output.hpp"
    #include "hw3_output.hpp"

    extern int yylex();
    extern int yylineno;
    int yyerror(const char* message);
    Symtab symtable;

    void closeScope(){
        if(!symtable.tableStack.empty()){
                output::endScope();
                symtable.tableStack.top()->printTable();
                symtable.tableStack.pop();
                symtable.offsetsStack.pop();
        }
    }
%}




%nonassoc INT;
%nonassoc BYTE;
%nonassoc B;
%nonassoc BOOL;
%nonassoc TRUE;
%nonassoc FALSE;
%nonassoc RETURN;
%nonassoc WHILE;
%nonassoc BREAK;
%nonassoc CONTINUE;
%nonassoc SC;
%nonassoc COMMA;
%nonassoc LBRACE;
%nonassoc RBRACE;
%nonassoc ID;
%nonassoc NUM;
%nonassoc STRING;
%nonassoc COMMENT;
%right ASSIGN;
%left OR;
%left AND;
%left EQUAL;
%left RELATIONAL;
%left BINOP;
%left MULT;
%right IF;
%right NOT;
%left RPAREN;
%left LPAREN;
%right ELSE;

%%

program:    statements 
            {
                closeScope();
                //output::printProductionRule(1);
                };

statements: statement 
            {//output::printProductionRule(2);
            };

statements: statements statement 
            {//output::printProductionRule(3);
            };

statement:  LBRACE openScopeMarker statements RBRACE 
            {
                closeScope();
                //output::printProductionRule(4);
            }

openScopeMarker:        %empty
                        {
                            symtable.addTable(symtable.tableStack.top());};

statement:  type ID SC 
            {
                Symtab::Table::Entry* entry = symtable.find(((IdNode*)$2)->id);
                if(entry){
                    if(entry->funcArg != ""){
                        output::errorUndef(yylineno, ((IdNode*)$2)->id);
                        exit(1);
                    }
                    output::errorDef(yylineno, ((IdNode*)$2)->id);
                    exit(1);
                }

                symtable.tableStack.top()->addEntry(((IdNode*)$2)->id, $1->print_Node(), symtable.offsetsStack.top()++);
                //output::printProductionRule(5);
                };

statement:  type ID ASSIGN exp SC 
            {   
                Symtab::Table::Entry* entry = symtable.find(((IdNode*)$2)->id);
                if(entry){
                    if(entry->funcArg != ""){
                        output::errorUndef(yylineno, ((IdNode*)$2)->id);
                        exit(1);
                    }
                    output::errorDef(yylineno, ((IdNode*)$2)->id);
                    exit(1);
                }

                string type1 = $1->print_Node();
                string type2 = $4->print_Node();
                if((type1 != type2) && !(type1=="INT" && type2=="BYTE")){
                    //cout << type1 << " " << type2 << "\n";
                    //cout << "here\n";
                    output::errorMismatch(yylineno);
                    exit(1);
                }
                
                symtable.tableStack.top()->addEntry(((IdNode*)$2)->id, $1->print_Node(), symtable.offsetsStack.top()++);
                //output::printProductionRule(6);
                };

statement:  ID ASSIGN exp SC
            {   
                string type1 = ((IdNode*)$1)->type;

                Symtab::Table::Entry* entry = symtable.find(((IdNode*)$1)->id);
                if(!entry){
                    output::errorUndef(yylineno, ((IdNode*)$1)->id);
                    exit(1);
                } else {
                    if(entry->funcArg != ""){
                        output::errorUndef(yylineno, $1->print_Node());
                        exit(1);
                    }
                    type1 = entry->type;
                }
                
                string type2 = $3->print_Node();
                if(type1 != type2 && !(type1=="INT" && type2=="BYTE")){
                    //cout << type1 << " " << type2 << "\n";
                    //cout << "here\n";
                    output::errorMismatch(yylineno);
                    exit(1);
                }
                
                //output::printProductionRule(7);
                };

statement:  call SC 
            {//output::printProductionRule(8);
            };

statement:  RETURN SC 
            {//output::printProductionRule(9);
            };

statement:  IF openScopeMarker LPAREN exp RPAREN statement 
            {
                if($4->print_Node() != "BOOL"){
                    output::errorMismatch(yylineno);
                    exit(1);
                }

                closeScope();
                //output::printProductionRule(10);
                };

statement:  IF openScopeMarker LPAREN exp RPAREN statement ELSE openAndCloseScopeMarker statement 
            {
                if($4->print_Node() != "BOOL"){
                    output::errorMismatch(yylineno);
                    exit(1);
                }

                closeScope();
                //output::printProductionRule(11);
                };

openAndCloseScopeMarker:  %empty 
                    {
                        closeScope();
                        symtable.addTable(symtable.tableStack.top());
                    }

statement:  WHILE openScopeMarker whileCheck LPAREN exp RPAREN statement 
            {
                if($5->print_Node() != "BOOL"){
                    output::errorMismatch(yylineno);
                    exit(1);
                }

                closeScope();
                //output::printProductionRule(12);
                };

whileCheck: %empty  
            {
                symtable.tableStack.top()->isWhile = true;
            }

statement:  BREAK SC 
            {
                if(!symtable.isInWhile()){
                    output::errorUnexpectedBreak(yylineno);
                    exit(1);
                }
                //output::printProductionRule(13);
                };

statement:  CONTINUE SC 
            {
                if(!symtable.isInWhile()){
                    output::errorUnexpectedContinue(yylineno);
                    exit(1);
                }
                //output::printProductionRule(14);
                };

call:       ID LPAREN exp RPAREN 
            {
                if(((IdNode*)$1)->id == "print"){
                    if($3->print_Node() != "STRING"){
                        output::errorPrototypeMismatch(yylineno, $3->print_Node(), "STRING");
                        exit(1);
                    }
                }
                else if(((IdNode*)$1)->id == "printi"){
                    if($3->print_Node() != "INT" && $3->print_Node() != "BYTE"){
                        output::errorPrototypeMismatch(yylineno, $3->print_Node(), "INT");
                        exit(1);
                    }
                }
                else if(((IdNode*)$1)->id == "readi"){
                    if($3->print_Node() != "INT" && $3->print_Node() != "BYTE"){
                        output::errorPrototypeMismatch(yylineno, $3->print_Node(), "INT");
                        exit(1);
                    }
                    $$ = new NumNode(yylineno, 0);
                }

                else{
                    output::errorUndefFunc(yylineno, $1->print_Node());
                    exit(1);
                }
                
                //output::printProductionRule(15);
            };

type:       INT 
            {
                $$ = $1;
                //output::printProductionRule(16);
                };

type:       BYTE 
            {
                $$ = $1;
                //output::printProductionRule(17);
                };

type:       BOOL 
            {
                $$ = $1;
                //output::printProductionRule(18);
                };

exp:        LPAREN exp RPAREN 
            {
                $$ = $2;
                //output::printProductionRule(19);
                };

exp:        exp BINOP exp 
            {
                if(($1->print_Node() != "INT" && $1->print_Node() != "BYTE") || $3->print_Node() != "INT" && $3->print_Node() != "BYTE"){
                    output::errorMismatch(yylineno);
                    exit(1);
                }

                $$ = new NumNode(yylineno, 0);
                //cout << ((NumNode*)$1)->type << " " << ((NumNode*)$3)->type << "\n";
                if($1->print_Node() == "BYTE" && $3->print_Node() == "BYTE"){
                    ((NumNode*)$$)->type = "BYTE";
                }
                //output::printProductionRule(20);
                };
            |
            exp MULT exp
            {
                if(($1->print_Node() != "INT" && $1->print_Node() != "BYTE") || $3->print_Node() != "INT" && $3->print_Node() != "BYTE"){
                    output::errorMismatch(yylineno);
                    exit(1);
                }

                $$ = new NumNode(yylineno, 0);
                if($1->print_Node() == "BYTE" && $3->print_Node() == "BYTE"){
                    ((NumNode*)$$)->type = "BYTE";
                }
                
                //output::printProductionRule(20);
                };

exp:        ID
            {
                Symtab::Table::Entry* entry = symtable.find(((IdNode*)$1)->id);
                if(!entry){
                    output::errorUndef(yylineno, $1->print_Node());
                    exit(1);
                }
                if(entry->funcArg != ""){
                    output::errorUndef(yylineno, $1->print_Node());
                    exit(1);
                }
                
                ((IdNode*)$1)->type = entry->type;

                $$ = $1;
                //output::printProductionRule(21);
                }

exp:        call
            {
                $$ = $1;
                //output::printProductionRule(22);
            }

exp:        NUM
            {
                $$ = $1;
            }

exp:        NUM B
            {
                if(((NumNode*)$1)->num > 255){
                    output::errorByteTooLarge(yylineno, std::to_string(((NumNode*)$1)->num));
                    exit(1);
                }
                
                ((NumNode*)$1)->type = "BYTE";
                $$ = $1;
                //output::printProductionRule(24);
                }

exp:        STRING
            {
                $$ = $1;
                //output::printProductionRule(25);
                }

exp :       TRUE
            {
                $$ = $1;
                //output::printProductionRule(26);
                };

exp:        FALSE
            {
                $$ = $1;
                //output::printProductionRule(27);
                }

exp:        NOT exp
            {
                if($2->print_Node() != "BOOL"){
                    output::errorMismatch(yylineno);
                    exit(1);
                }

                $$ = $2;
                //output::printProductionRule(28);
                }

exp:        exp AND exp
            {
                if($1->print_Node() != "BOOL" || $3->print_Node() != "BOOL"){
                    output::errorMismatch(yylineno);
                    exit(1);
                }

                $$ = $2;
                //output::printProductionRule(29);
                }

exp:        exp OR exp
            {
                if($1->print_Node() != "BOOL" || $3->print_Node() != "BOOL"){
                    output::errorMismatch(yylineno);
                    exit(1);
                }

                $$ = $2;
                //output::printProductionRule(30);
                }

exp:        exp RELATIONAL exp
            {
                if(($1->print_Node() != "INT") && ($1->print_Node() != "BYTE") || ($3->print_Node() != "INT") && ($3->print_Node() != "BYTE")){
                    output::errorMismatch(yylineno);
                    exit(1);
                }

                $$ = new TypeNode(yylineno, "BOOL");
                //output::printProductionRule(31);
                }
            |
            exp EQUAL exp
            {
                if(($1->print_Node() == "STRING") || (($1->print_Node() != $3->print_Node()) && (!($1->print_Node() == "INT" && $3->print_Node() == "BYTE") || !($1->print_Node() == "BYTE" && $3->print_Node() == "INT")))) {
                    output::errorMismatch(yylineno);
                    exit(1);
                }

                $$ = new TypeNode(yylineno, "BOOL");
                //output::printProductionRule(31);
                }

exp:        LPAREN type RPAREN exp
            {
                if(($2->print_Node() != "INT") && ($2->print_Node() != "BYTE") || ($4->print_Node() != "INT") && ($4->print_Node() != "BYTE")){
                    output::errorMismatch(yylineno);
                    exit(1);
                }

                //cout << "here\n";
                $4->type = $2->print_Node();
                //cout << ((NumNode*)$4)->type << "\n";
                $$ = $4;
                //output::printProductionRule(32);
            }


%%

int main() {
    return yyparse(); 
    closeScope();
} 

int yyerror(const char* s)
{
    output::errorSyn(yylineno);
    exit(1);
    return 0;
}