%{
    #include <iostream>
    #include <stdlib.h>
    using namespace std;
    #include "source.hpp"
    #include "hw3_output.hpp"

    extern int yylex();
    extern int yylineno;
    int yyerror(const char* message);
    Symtab symtable;
    std::vector<Node*> allocatedNodes;

    void closeScope(){
        if(!symtable.tableStack.empty()){
                output::endScope();
                symtable.tableStack.top()->printTable();
                symtable.tableStack.top()->deleteTable();
                symtable.tableStack.pop();
                symtable.offsetsStack.pop();
        }
    }
    void cleanUpNodes() {
    for (Node* node : allocatedNodes) {
        delete node;
    }
    allocatedNodes.clear();
}
%}




%nonassoc INT;
%nonassoc BYTE;
%nonassoc B;
%nonassoc BOOL;
%nonassoc TRUE;
%nonassoc FALSE;
%nonassoc RETURN;
%nonassoc WHILE;
%nonassoc BREAK;
%nonassoc CONTINUE;
%nonassoc SC;
%nonassoc COMMA;
%nonassoc LBRACE;
%nonassoc RBRACE;
%nonassoc ID;
%nonassoc NUM;
%nonassoc STRING;
%nonassoc COMMENT;
%right ASSIGN;
%left OR;
%left AND;
%left EQUAL;
%left RELATIONAL;
%left BINOP;
%left MULT;
%right IF;
%right NOT;
%left RPAREN;
%left LPAREN;
%right ELSE;

%%

program:    statements 
            {
                };

statements: statement {};

statements: statements statement { };

statement:  LBRACE openScopeMarker statements RBRACE 
            {
                closeScope();
            }

openScopeMarker:        %empty
                        {
                            symtable.addTable(symtable.tableStack.top());};

statement:  type ID SC 
            {
                Symtab::Table::Entry* entry = symtable.find(((IdNode*)$2)->id);
                if(entry){
                    output::errorDef($$->lineno, ((IdNode*)$2)->id);
                    cleanUpNodes();
                    exit(1);
                    }

                symtable.tableStack.top()->addEntry(((IdNode*)$2)->id, $1->print_Node(), symtable.offsetsStack.top()++);
                };

statement:  type ID ASSIGN exp SC 
            {   
                Symtab::Table::Entry* entry = symtable.find(((IdNode*)$2)->id);
                if(entry){
                    output::errorDef($$->lineno, ((IdNode*)$2)->id);
                    cleanUpNodes();
                    exit(1);
                }

                string type1 = $1->type;
                string type2 = $4->type;
                if((type1 != type2) && !(type1=="INT" && type2=="BYTE")){
                    output::errorMismatch($$->lineno);
                    cleanUpNodes();
                    exit(1);
                }
                
                symtable.tableStack.top()->addEntry(((IdNode*)$2)->id, $1->print_Node(), symtable.offsetsStack.top()++);
                };

statement:  ID ASSIGN exp SC
            {   
                string type1 = $1->type;

                Symtab::Table::Entry* entry = symtable.find(((IdNode*)$1)->id);
                if(!entry){
                    output::errorUndef($$->lineno, ((IdNode*)$1)->id);
                    cleanUpNodes();
                    exit(1);
                } else {
                    if(entry->funcArg != ""){
                        output::errorUndef($$->lineno, ((IdNode*)$1)->id);
                        cleanUpNodes();
                        exit(1);
                    }
                    type1 = entry->type;
                }
                
                string type2 = $3->print_Node();
                if(type1 != type2 && !(type1=="INT" && type2=="BYTE")){
                    output::errorMismatch($$->lineno);
                    cleanUpNodes();
                    exit(1);
                }
                
                };

statement:  call SC {};

statement:  RETURN SC {};

statement:  IF openScopeMarker LPAREN exp RPAREN statement 
            {
                if($4->type != "BOOL"){
                    output::errorMismatch($$->lineno);
                    cleanUpNodes();
                    exit(1);
                }

                closeScope();
                };

statement:  IF openScopeMarker LPAREN exp RPAREN statement ELSE openAndCloseScopeMarker statement 
            {
                if($4->type != "BOOL"){
                    output::errorMismatch($$->lineno);
                    cleanUpNodes();
                    exit(1);
                }

                closeScope();
                };

openAndCloseScopeMarker:  %empty 
                    {
                        closeScope();
                        symtable.addTable(symtable.tableStack.top());
                    }

statement:  WHILE openScopeMarker whileCheck LPAREN exp RPAREN statement 
            {
                if($5->type != "BOOL"){
                    output::errorMismatch($$->lineno);
                    cleanUpNodes();
                    exit(1);
                }

                closeScope();
                };

whileCheck: %empty  
            {
                symtable.tableStack.top()->isWhile = true;
            }

statement:  BREAK SC 
            {
                if(!symtable.isInWhile()){
                    output::errorUnexpectedBreak($$->lineno);
                    cleanUpNodes();
                    exit(1);
                }
                };

statement:  CONTINUE SC 
            {
                if(!symtable.isInWhile()){
                    output::errorUnexpectedContinue($$->lineno);
                    cleanUpNodes();
                    exit(1);
                }
                };

call:       ID LPAREN exp RPAREN 
            {
                if(((IdNode*)$1)->id == "print"){
                    if($3->type != "STRING"){
                        output::errorPrototypeMismatch($$->lineno, "print", "STRING");
                        cleanUpNodes();
                        exit(1);
                    }
                    $$ = new Node($$->lineno, "VOID");
                    allocatedNodes.push_back($$);
                }
                else if(((IdNode*)$1)->id == "printi"){
                    if($3->type != "INT" && $3->type != "BYTE"){
                        output::errorPrototypeMismatch($$->lineno, "printi", "INT");
                        cleanUpNodes();
                        exit(1);
                    }
                    $$ = new Node($$->lineno, "VOID");
                    allocatedNodes.push_back($$);
                }
                else if(((IdNode*)$1)->id == "readi"){
                    if($3->type != "INT" && $3->type != "BYTE"){
                        output::errorPrototypeMismatch($$->lineno, "readi", "INT");
                        cleanUpNodes();
                        exit(1);
                    }
                    $$ = new NumNode($$->lineno, 0, "INT");
                    allocatedNodes.push_back($$);
                }

                else{
                    output::errorUndefFunc($$->lineno, ((IdNode*)$1)->id);
                    cleanUpNodes();
                    exit(1);
                }
                
            };

type:       INT 
            {
                $$ = $1;
            };

type:       BYTE 
            {
                $$ = $1;
            };

type:       BOOL 
            {
                $$ = $1;
            };

exp:        LPAREN exp RPAREN 
            {
                $$ = $2;
            };

exp:        exp BINOP exp 
            {
                if(($1->type != "INT" && $1->type != "BYTE") || $3->type != "INT" && $3->type != "BYTE"){
                    output::errorMismatch($$->lineno);
                    cleanUpNodes();
                    exit(1);
                }

                $$ = new NumNode($$->lineno, 0, "INT");
                allocatedNodes.push_back($$);
                if($1->type == "BYTE" && $3->type == "BYTE"){
                    ((NumNode*)$$)->type = "BYTE";
                }
                };
            |
            exp MULT exp
            {
                if(($1->type != "INT" && $1->type != "BYTE") || $3->type != "INT" && $3->type != "BYTE"){
                    output::errorMismatch($$->lineno);
                    cleanUpNodes();
                    exit(1);
                }

                $$ = new NumNode($$->lineno, 0, "INT");
                allocatedNodes.push_back($$);
                if($1->print_Node() == "BYTE" && $3->type == "BYTE"){
                    ((NumNode*)$$)->type = "BYTE";
                }
                
                };

exp:        ID
            {
                Symtab::Table::Entry* entry = symtable.find(((IdNode*)$1)->id);
                if(!entry){
                    output::errorUndef($$->lineno, ((IdNode*)$1)->id);
                    cleanUpNodes();
                    exit(1);
                }
                if(entry->funcArg != ""){
                    output::errorUndef($$->lineno, ((IdNode*)$1)->id);
                    cleanUpNodes();
                    exit(1);
                }
                
                ((IdNode*)$1)->type = entry->type;

                $$ = $1;
                }

exp:        call
            {
                $$ = $1;
            }

exp:        NUM
            {
                $$ = $1;
            }

exp:        NUM B
            {
                if(((NumNode*)$1)->num > 255){
                    output::errorByteTooLarge($$->lineno, std::to_string(((NumNode*)$1)->num));
                    cleanUpNodes();
                    exit(1);
                }
                
                ((NumNode*)$1)->type = "BYTE";
                $$ = $1;
                }

exp:        STRING
            {
                $$ = $1;
                }

exp :       TRUE
            {
                $$ = $1;
                };

exp:        FALSE
            {
                $$ = $1;
                }

exp:        NOT exp
            {
                if($2->print_Node() != "BOOL"){
                    output::errorMismatch($$->lineno);
                    cleanUpNodes();
                    exit(1);
                }

                $$ = $2;
                }

exp:        exp AND exp
            {
                if($1->print_Node() != "BOOL" || $3->print_Node() != "BOOL"){
                    output::errorMismatch($$->lineno);
                    cleanUpNodes();
                    exit(1);
                }

                $$ = $2;
                }

exp:        exp OR exp
            {
                if($1->print_Node() != "BOOL" || $3->print_Node() != "BOOL"){
                    output::errorMismatch($$->lineno);
                    cleanUpNodes();
                    exit(1);
                }

                $$ = $2;
                }

exp:        exp RELATIONAL exp
            {
                if(($1->print_Node() != "INT") && ($1->print_Node() != "BYTE") || ($3->print_Node() != "INT") && ($3->print_Node() != "BYTE")){
                    output::errorMismatch($$->lineno);
                    cleanUpNodes();
                    exit(1);
                }

                $$ = new TypeNode($$->lineno, "BOOL");
                allocatedNodes.push_back($$);
                }
            |
            exp EQUAL exp
            {
                if(($1->print_Node() == "STRING") || (($1->print_Node() != $3->print_Node()) && (!($1->print_Node() == "INT" && $3->print_Node() == "BYTE") || !($1->print_Node() == "BYTE" && $3->print_Node() == "INT")))) {
                    output::errorMismatch($$->lineno);
                    cleanUpNodes();
                    exit(1);
                }

                $$ = new TypeNode($$->lineno, "BOOL");
                allocatedNodes.push_back($$);
                }

exp:        LPAREN type RPAREN exp
            {
                if(($2->print_Node() != "INT") && ($2->print_Node() != "BYTE") || ($4->print_Node() != "INT") && ($4->print_Node() != "BYTE")){
                    output::errorMismatch($$->lineno);
                    cleanUpNodes();
                    exit(1);
                }

                string expType;

                /*if(dynamic_cast<IdNode*>($4)){
                    Symtab::Table::Entry* entry = symtable.find(((IdNode*)$4)->id);
                    entry->type = $2->print_Node();
                    expType = entry->type;
                }
                else {
                    $4->type = $2->print_Node();
                    expType = $4->type;
                }*/

                $4->type = $2->print_Node();

                $$ = $4;
            }


%%

int main() {
    int ret_val = yyparse(); 
    closeScope();
    cleanUpNodes();

    return ret_val;
} 

int yyerror(const char* s)
{
    output::errorSyn(yylineno);
    cleanUpNodes();
    exit(1);
    return 0;
}